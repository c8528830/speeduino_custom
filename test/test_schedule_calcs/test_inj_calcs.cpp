#include <Arduino.h>
#include <unity.h>
#include "test_calcs_common.h"
#include "schedule_calcs.h"
#include "crankMaths.h"

#define _countof(x) (sizeof(x) / sizeof (x[0]))

// void printFreeRam()
// {
//     char msg[128];
//     sprintf(msg, "freeRam: %u", freeRam());
//     TEST_MESSAGE(msg);
// }

struct inj_test_parameters
{
    uint16_t channelAngle;  // deg
    uint16_t pw;            // uS
    uint16_t crankAngle;    // deg
    uint32_t pending;       // Expected delay when channel status is PENDING
    uint32_t running;       // Expected delay when channel status is RUNNING
};

static void test_calc_inj_timeout(const inj_test_parameters &parameters)
{
    static constexpr uint16_t injAngle = 355;
    char msg[150];
    uint16_t PWdivTimerPerDegree = timeToAngleDegPerMicroSec(parameters.pw);

    memset(&fuelSchedule2, 0, sizeof(fuelSchedule2));

    fuelSchedule2.Status = PENDING;
    uint16_t startAngle = calculateInjectorStartAngle(PWdivTimerPerDegree, parameters.channelAngle, injAngle);
    sprintf_P(msg, PSTR("PENDING channelAngle: % " PRIu16 ", pw: % " PRIu16 ", crankAngle: % " PRIu16 ", startAngle: % " PRIu16 ""), parameters.channelAngle, parameters.pw, parameters.crankAngle, startAngle);
    TEST_ASSERT_EQUAL_MESSAGE(parameters.pending, calculateInjectorTimeout(fuelSchedule2, parameters.channelAngle, startAngle, parameters.crankAngle), msg);
    
    fuelSchedule2.Status = RUNNING;
    startAngle = calculateInjectorStartAngle( PWdivTimerPerDegree, parameters.channelAngle, injAngle);
    sprintf_P(msg, PSTR("RUNNING channelAngle: % " PRIu16 ", pw: % " PRIu16 ", crankAngle: % " PRIu16 ", startAngle: % " PRIu16 ""), parameters.channelAngle, parameters.pw, parameters.crankAngle, startAngle);
    TEST_ASSERT_EQUAL_MESSAGE(parameters.running, calculateInjectorTimeout(fuelSchedule2, parameters.channelAngle, startAngle, parameters.crankAngle), msg);
}


static void test_calc_inj_timeout(const inj_test_parameters *pStart, const inj_test_parameters *pEnd)
{
    inj_test_parameters local;
    while (pStart!=pEnd)
    {
        memcpy_P(&local, pStart, sizeof(local));
        test_calc_inj_timeout(local);
        ++pStart;
    }
}

static void test_calc_inj_timeout_360()
{
    setEngineSpeed(4000, 360);

    static const inj_test_parameters test_data[] PROGMEM = {
        // ChannelAngle (deg), PW (uS), Crank (deg), Expected Pending (uS), Expected Running (uS)
        { 0, 3000, 0, 11779, 11779 },
        { 0, 3000, 45, 9906, 9906 },
        { 0, 3000, 90, 8033, 8033 },
        { 0, 3000, 135, 6160, 6160 },
        { 0, 3000, 180, 4287, 4287 },
        { 0, 3000, 215, 2830, 2830 },
        { 0, 3000, 270, 541, 541 },
        { 0, 3000, 315, 0, 13653 },
        { 0, 3000, 360, 0, 11779 },
        { 72, 3000, 0, 0, 14776 },
        { 72, 3000, 45, 0, 12903 },
        { 72, 3000, 90, 11030, 11030 },
        { 72, 3000, 135, 9157, 9157 },
        { 72, 3000, 180, 7284, 7284 },
        { 72, 3000, 215, 5827, 5827 },
        { 72, 3000, 270, 3538, 3538 },
        { 72, 3000, 315, 1665, 1665 },
        { 72, 3000, 360, 0, 14776 },
        { 80, 3000, 0, 124, 124 },
        { 80, 3000, 45, 0, 13236 },
        { 80, 3000, 90, 11363, 11363 },
        { 80, 3000, 135, 9490, 9490 },
        { 80, 3000, 180, 7617, 7617 },
        { 80, 3000, 215, 6160, 6160 },
        { 80, 3000, 270, 3871, 3871 },
        { 80, 3000, 315, 1998, 1998 },
        { 80, 3000, 360, 124, 124 },
        { 90, 3000, 0, 541, 541 },
        { 90, 3000, 45, 0, 13653 },
        { 90, 3000, 90, 11779, 11779 },
        { 90, 3000, 135, 9906, 9906 },
        { 90, 3000, 180, 8033, 8033 },
        { 90, 3000, 215, 6576, 6576 },
        { 90, 3000, 270, 4287, 4287 },
        { 90, 3000, 315, 2414, 2414 },
        { 90, 3000, 360, 541, 541 },
        { 144, 3000, 0, 2788, 2788 },
        { 144, 3000, 45, 915, 915 },
        { 144, 3000, 90, 0, 14027 },
        { 144, 3000, 135, 0, 12154 },
        { 144, 3000, 180, 10281, 10281 },
        { 144, 3000, 215, 8824, 8824 },
        { 144, 3000, 270, 6535, 6535 },
        { 144, 3000, 315, 4662, 4662 },
        { 144, 3000, 360, 2788, 2788 },
        { 180, 3000, 0, 4287, 4287 },
        { 180, 3000, 45, 2414, 2414 },
        { 180, 3000, 90, 541, 541 },
        { 180, 3000, 135, 0, 13653 },
        { 180, 3000, 180, 11779, 11779 },
        { 180, 3000, 215, 10323, 10323 },
        { 180, 3000, 270, 8033, 8033 },
        { 180, 3000, 315, 6160, 6160 },
        { 180, 3000, 360, 4287, 4287 },
        { 240, 3000, 0, 6784, 6784 },
        { 240, 3000, 45, 4911, 4911 },
        { 240, 3000, 90, 3038, 3038 },
        { 240, 3000, 135, 1165, 1165 },
        { 240, 3000, 180, 0, 14277 },
        { 240, 3000, 215, 0, 12820 },
        { 240, 3000, 270, 10531, 10531 },
        { 240, 3000, 315, 8658, 8658 },
        { 240, 3000, 360, 6784, 6784 },
        { 270, 3000, 0, 8033, 8033 },
        { 270, 3000, 45, 6160, 6160 },
        { 270, 3000, 90, 4287, 4287 },
        { 270, 3000, 135, 2414, 2414 },
        { 270, 3000, 180, 541, 541 },
        { 270, 3000, 215, 0, 14069 },
        { 270, 3000, 270, 11779, 11779 },
        { 270, 3000, 315, 9906, 9906 },
        { 270, 3000, 360, 8033, 8033 },
        { 360, 3000, 0, 11779, 11779 },
        { 360, 3000, 45, 9906, 9906 },
        { 360, 3000, 90, 8033, 8033 },
        { 360, 3000, 135, 6160, 6160 },
        { 360, 3000, 180, 4287, 4287 },
        { 360, 3000, 215, 2830, 2830 },
        { 360, 3000, 270, 541, 541 },
        { 360, 3000, 315, 0, 13653 },
        { 360, 3000, 360, 11779, 11779 },
    };

    test_calc_inj_timeout(&test_data[0], &test_data[0]+_countof(test_data));
}

static void test_calc_inj_timeout_720()
{
    setEngineSpeed(4000, 720);
    
    static const inj_test_parameters test_data[] PROGMEM = {
        // ChannelAngle (deg), PW (uS), Crank (deg), Expected Pending (uS), Expected Running (uS)
        { 0, 3000, 0, 11779, 11779 },
        { 0, 3000, 45, 9906, 9906 },
        { 0, 3000, 90, 8033, 8033 },
        { 0, 3000, 135, 6160, 6160 },
        { 0, 3000, 180, 4287, 4287 },
        { 0, 3000, 215, 2830, 2830 },
        { 0, 3000, 270, 541, 541 },
        { 0, 3000, 315, 0, 28638 },
        { 0, 3000, 360, 0, 26764 },
        { 72, 3000, 0, 0, 14776 },
        { 72, 3000, 45, 0, 12903 },
        { 72, 3000, 90, 11030, 11030 },
        { 72, 3000, 135, 9157, 9157 },
        { 72, 3000, 180, 7284, 7284 },
        { 72, 3000, 215, 5827, 5827 },
        { 72, 3000, 270, 3538, 3538 },
        { 72, 3000, 315, 1665, 1665 },
        { 72, 3000, 360, 0, 29761 },
        { 80, 3000, 0, 0, 15109 },
        { 80, 3000, 45, 0, 13236 },
        { 80, 3000, 90, 11363, 11363 },
        { 80, 3000, 135, 9490, 9490 },
        { 80, 3000, 180, 7617, 7617 },
        { 80, 3000, 215, 6160, 6160 },
        { 80, 3000, 270, 3871, 3871 },
        { 80, 3000, 315, 1998, 1998 },
        { 80, 3000, 360, 124, 124 },
        { 90, 3000, 0, 0, 15526 },
        { 90, 3000, 45, 0, 13653 },
        { 90, 3000, 90, 11779, 11779 },
        { 90, 3000, 135, 9906, 9906 },
        { 90, 3000, 180, 8033, 8033 },
        { 90, 3000, 215, 6576, 6576 },
        { 90, 3000, 270, 4287, 4287 },
        { 90, 3000, 315, 2414, 2414 },
        { 90, 3000, 360, 541, 541 },
        { 144, 3000, 0, 0, 17773 },
        { 144, 3000, 45, 0, 15900 },
        { 144, 3000, 90, 0, 14027 },
        { 144, 3000, 135, 0, 12154 },
        { 144, 3000, 180, 10281, 10281 },
        { 144, 3000, 215, 8824, 8824 },
        { 144, 3000, 270, 6535, 6535 },
        { 144, 3000, 315, 4662, 4662 },
        { 144, 3000, 360, 2788, 2788 },
        { 180, 3000, 0, 0, 19272 },
        { 180, 3000, 45, 0, 17399 },
        { 180, 3000, 90, 0, 15526 },
        { 180, 3000, 135, 0, 13653 },
        { 180, 3000, 180, 11779, 11779 },
        { 180, 3000, 215, 10323, 10323 },
        { 180, 3000, 270, 8033, 8033 },
        { 180, 3000, 315, 6160, 6160 },
        { 180, 3000, 360, 4287, 4287 },
        { 240, 3000, 0, 0, 21769 },
        { 240, 3000, 45, 0, 19896 },
        { 240, 3000, 90, 0, 18023 },
        { 240, 3000, 135, 0, 16150 },
        { 240, 3000, 180, 0, 14277 },
        { 240, 3000, 215, 0, 12820 },
        { 240, 3000, 270, 10531, 10531 },
        { 240, 3000, 315, 8658, 8658 },
        { 240, 3000, 360, 6784, 6784 },
        { 270, 3000, 0, 0, 23018 },
        { 270, 3000, 45, 0, 21145 },
        { 270, 3000, 90, 0, 19272 },
        { 270, 3000, 135, 0, 17399 },
        { 270, 3000, 180, 0, 15526 },
        { 270, 3000, 215, 0, 14069 },
        { 270, 3000, 270, 11779, 11779 },
        { 270, 3000, 315, 9906, 9906 },
        { 270, 3000, 360, 8033, 8033 },
        { 360, 3000, 0, 0, 26764 },
        { 360, 3000, 45, 0, 24891 },
        { 360, 3000, 90, 0, 23018 },
        { 360, 3000, 135, 0, 21145 },
        { 360, 3000, 180, 0, 19272 },
        { 360, 3000, 215, 0, 17815 },
        { 360, 3000, 270, 0, 15526 },
        { 360, 3000, 315, 0, 13653 },
        { 360, 3000, 360, 11779, 11779 },
        { 480, 3000, 0, 1789, 1789 },
        { 480, 3000, 45, 0, 29886 },
        { 480, 3000, 90, 0, 28013 },
        { 480, 3000, 135, 0, 26140 },
        { 480, 3000, 180, 0, 24267 },
        { 480, 3000, 215, 0, 22810 },
        { 480, 3000, 270, 0, 20521 },
        { 480, 3000, 315, 0, 18648 },
        { 480, 3000, 360, 0, 16774 },
        { 540, 3000, 0, 4287, 4287 },
        { 540, 3000, 45, 2414, 2414 },
        { 540, 3000, 90, 541, 541 },
        { 540, 3000, 135, 0, 28638 },
        { 540, 3000, 180, 0, 26764 },
        { 540, 3000, 215, 0, 25308 },
        { 540, 3000, 270, 0, 23018 },
        { 540, 3000, 315, 0, 21145 },
        { 540, 3000, 360, 0, 19272 },
        { 600, 3000, 0, 6784, 6784 },
        { 600, 3000, 45, 4911, 4911 },
        { 600, 3000, 90, 3038, 3038 },
        { 600, 3000, 135, 1165, 1165 },
        { 600, 3000, 180, 0, 29262 },
        { 600, 3000, 215, 0, 27805 },
        { 600, 3000, 270, 0, 25516 },
        { 600, 3000, 315, 0, 23643 },
        { 600, 3000, 360, 0, 21769 },
        { 630, 3000, 0, 8033, 8033 },
        { 630, 3000, 45, 6160, 6160 },
        { 630, 3000, 90, 4287, 4287 },
        { 630, 3000, 135, 2414, 2414 },
        { 630, 3000, 180, 541, 541 },
        { 630, 3000, 215, 0, 29054 },
        { 630, 3000, 270, 0, 26764 },
        { 630, 3000, 315, 0, 24891 },
        { 630, 3000, 360, 0, 23018 },
   };

    test_calc_inj_timeout(&test_data[0], &test_data[0]+_countof(test_data));
}

// 
void test_calc_inj_timeout(void)
{
    RUN_TEST(test_calc_inj_timeout_360);
    RUN_TEST(test_calc_inj_timeout_720);
}
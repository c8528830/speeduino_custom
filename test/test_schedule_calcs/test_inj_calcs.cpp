#include <Arduino.h>
#include <unity.h>
#include "test_calcs_common.h"
#include "schedule_calcs.h"
#include "crankMaths.h"

#define _countof(x) (sizeof(x) / sizeof (x[0]))

// void printFreeRam()
// {
//     char msg[128];
//     sprintf(msg, "freeRam: %u", freeRam());
//     TEST_MESSAGE(msg);
// }

struct inj_test_parameters
{
    uint16_t channelAngle;  // deg
    uint16_t pw;            // uS
    uint16_t crankAngle;    // deg
    uint32_t pending;       // Expected delay when channel status is PENDING
    uint32_t running;       // Expected delay when channel status is RUNNING
};

static void test_calc_inj_timeout(const inj_test_parameters &parameters)
{
    static constexpr uint16_t injAngle = 355;
    char msg[150];
    uint16_t PWdivTimerPerDegree = timeToAngleDegPerMicroSec(parameters.pw);

    memset(&fuelSchedule2, 0, sizeof(fuelSchedule2));

    fuelSchedule2.Status = PENDING;
    uint16_t startAngle = calculateInjectorStartAngle(PWdivTimerPerDegree, parameters.channelAngle, injAngle);
    sprintf_P(msg, PSTR("PENDING channelAngle: % " PRIu16 ", pw: % " PRIu16 ", crankAngle: % " PRIu16 ", startAngle: % " PRIu16 ""), parameters.channelAngle, parameters.pw, parameters.crankAngle, startAngle);
    TEST_ASSERT_EQUAL_MESSAGE(parameters.pending, calculateInjectorTimeout(fuelSchedule2, parameters.channelAngle, startAngle, parameters.crankAngle), msg);
    
    fuelSchedule2.Status = RUNNING;
    startAngle = calculateInjectorStartAngle( PWdivTimerPerDegree, parameters.channelAngle, injAngle);
    sprintf_P(msg, PSTR("RUNNING channelAngle: % " PRIu16 ", pw: % " PRIu16 ", crankAngle: % " PRIu16 ", startAngle: % " PRIu16 ""), parameters.channelAngle, parameters.pw, parameters.crankAngle, startAngle);
    TEST_ASSERT_EQUAL_MESSAGE(parameters.running, calculateInjectorTimeout(fuelSchedule2, parameters.channelAngle, startAngle, parameters.crankAngle), msg);
}


static void test_calc_inj_timeout(const inj_test_parameters *pStart, const inj_test_parameters *pEnd)
{
    inj_test_parameters local;
    while (pStart!=pEnd)
    {
        memcpy_P(&local, pStart, sizeof(local));
        test_calc_inj_timeout(local);
        ++pStart;
    }
}

static void test_calc_inj_timeout_360()
{
    setEngineSpeed(4000, 360);

    static const inj_test_parameters test_data[] PROGMEM = {
        // ChannelAngle (deg), PW (uS), Crank (deg), Expected Pending (uS), Expected Running (uS)
        { 0, 3000, 0, 11792, 11792 },
        { 0, 3000, 45, 9916, 9916 },
        { 0, 3000, 90, 8041, 8041 },
        { 0, 3000, 135, 6166, 6166 },
        { 0, 3000, 180, 4291, 4291 },
        { 0, 3000, 215, 2833, 2833 },
        { 0, 3000, 270, 541, 541 },
        { 0, 3000, 315, 0, 13667 },
        { 0, 3000, 360, 0, 11792 },
        { 72, 3000, 0, 0, 14792 },
        { 72, 3000, 45, 0, 12917 },
        { 72, 3000, 90, 11042, 11042 },
        { 72, 3000, 135, 9166, 9166 },
        { 72, 3000, 180, 7291, 7291 },
        { 72, 3000, 215, 5833, 5833 },
        { 72, 3000, 270, 3541, 3541 },
        { 72, 3000, 315, 1666, 1666 },
        { 72, 3000, 360, 0, 14792 },
        { 80, 3000, 0, 125, 125 },
        { 80, 3000, 45, 0, 13250 },
        { 80, 3000, 90, 11375, 11375 },
        { 80, 3000, 135, 9500, 9500 },
        { 80, 3000, 180, 7625, 7625 },
        { 80, 3000, 215, 6166, 6166 },
        { 80, 3000, 270, 3875, 3875 },
        { 80, 3000, 315, 2000, 2000 },
        { 80, 3000, 360, 125, 125 },
        { 90, 3000, 0, 541, 541 },
        { 90, 3000, 45, 0, 13667 },
        { 90, 3000, 90, 11792, 11792 },
        { 90, 3000, 135, 9916, 9916 },
        { 90, 3000, 180, 8041, 8041 },
        { 90, 3000, 215, 6583, 6583 },
        { 90, 3000, 270, 4291, 4291 },
        { 90, 3000, 315, 2416, 2416 },
        { 90, 3000, 360, 541, 541 },
        { 144, 3000, 0, 2791, 2791 },
        { 144, 3000, 45, 916, 916 },
        { 144, 3000, 90, 0, 14042 },
        { 144, 3000, 135, 0, 12167 },
        { 144, 3000, 180, 10291, 10291 },
        { 144, 3000, 215, 8833, 8833 },
        { 144, 3000, 270, 6541, 6541 },
        { 144, 3000, 315, 4666, 4666 },
        { 144, 3000, 360, 2791, 2791 },
        { 180, 3000, 0, 4291, 4291 },
        { 180, 3000, 45, 2416, 2416 },
        { 180, 3000, 90, 541, 541 },
        { 180, 3000, 135, 0, 13667 },
        { 180, 3000, 180, 11792, 11792 },
        { 180, 3000, 215, 10333, 10333 },
        { 180, 3000, 270, 8041, 8041 },
        { 180, 3000, 315, 6166, 6166 },
        { 180, 3000, 360, 4291, 4291 },
        { 240, 3000, 0, 6791, 6791 },
        { 240, 3000, 45, 4916, 4916 },
        { 240, 3000, 90, 3041, 3041 },
        { 240, 3000, 135, 1166, 1166 },
        { 240, 3000, 180, 0, 14292 },
        { 240, 3000, 215, 0, 12833 },
        { 240, 3000, 270, 10541, 10541 },
        { 240, 3000, 315, 8666, 8666 },
        { 240, 3000, 360, 6791, 6791 },
        { 270, 3000, 0, 8041, 8041 },
        { 270, 3000, 45, 6166, 6166 },
        { 270, 3000, 90, 4291, 4291 },
        { 270, 3000, 135, 2416, 2416 },
        { 270, 3000, 180, 541, 541 },
        { 270, 3000, 215, 0, 14083 },
        { 270, 3000, 270, 11792, 11792 },
        { 270, 3000, 315, 9916, 9916 },
        { 270, 3000, 360, 8041, 8041 },
        { 360, 3000, 0, 11792, 11792 },
        { 360, 3000, 45, 9916, 9916 },
        { 360, 3000, 90, 8041, 8041 },
        { 360, 3000, 135, 6166, 6166 },
        { 360, 3000, 180, 4291, 4291 },
        { 360, 3000, 215, 2833, 2833 },
        { 360, 3000, 270, 541, 541 },
        { 360, 3000, 315, 0, 13667 },
        { 360, 3000, 360, 11792, 11792 },
    };

    test_calc_inj_timeout(&test_data[0], &test_data[0]+_countof(test_data));
}

static void test_calc_inj_timeout_720()
{
    setEngineSpeed(4000, 720);
    
    static const inj_test_parameters test_data[] PROGMEM = {
        // ChannelAngle (deg), PW (uS), Crank (deg), Expected Pending (uS), Expected Running (uS)
        { 0, 3000, 0, 11792, 11792 },
        { 0, 3000, 45, 9916, 9916 },
        { 0, 3000, 90, 8041, 8041 },
        { 0, 3000, 135, 6166, 6166 },
        { 0, 3000, 180, 4291, 4291 },
        { 0, 3000, 215, 2833, 2833 },
        { 0, 3000, 270, 541, 541 },
        { 0, 3000, 315, 0, 28667 },
        { 0, 3000, 360, 0, 26792 },
        { 72, 3000, 0, 0, 14792 },
        { 72, 3000, 45, 0, 12917 },
        { 72, 3000, 90, 11042, 11042 },
        { 72, 3000, 135, 9166, 9166 },
        { 72, 3000, 180, 7291, 7291 },
        { 72, 3000, 215, 5833, 5833 },
        { 72, 3000, 270, 3541, 3541 },
        { 72, 3000, 315, 1666, 1666 },
        { 72, 3000, 360, 0, 29792 },
        { 80, 3000, 0, 0, 15125 },
        { 80, 3000, 45, 0, 13250 },
        { 80, 3000, 90, 11375, 11375 },
        { 80, 3000, 135, 9500, 9500 },
        { 80, 3000, 180, 7625, 7625 },
        { 80, 3000, 215, 6166, 6166 },
        { 80, 3000, 270, 3875, 3875 },
        { 80, 3000, 315, 2000, 2000 },
        { 80, 3000, 360, 125, 125 },
        { 90, 3000, 0, 0, 15542 },
        { 90, 3000, 45, 0, 13667 },
        { 90, 3000, 90, 11792, 11792 },
        { 90, 3000, 135, 9916, 9916 },
        { 90, 3000, 180, 8041, 8041 },
        { 90, 3000, 215, 6583, 6583 },
        { 90, 3000, 270, 4291, 4291 },
        { 90, 3000, 315, 2416, 2416 },
        { 90, 3000, 360, 541, 541 },
        { 144, 3000, 0, 0, 17792 },
        { 144, 3000, 45, 0, 15917 },
        { 144, 3000, 90, 0, 14042 },
        { 144, 3000, 135, 0, 12167 },
        { 144, 3000, 180, 10291, 10291 },
        { 144, 3000, 215, 8833, 8833 },
        { 144, 3000, 270, 6541, 6541 },
        { 144, 3000, 315, 4666, 4666 },
        { 144, 3000, 360, 2791, 2791 },
        { 180, 3000, 0, 0, 19292 },
        { 180, 3000, 45, 0, 17417 },
        { 180, 3000, 90, 0, 15542 },
        { 180, 3000, 135, 0, 13667 },
        { 180, 3000, 180, 11792, 11792 },
        { 180, 3000, 215, 10333, 10333 },
        { 180, 3000, 270, 8041, 8041 },
        { 180, 3000, 315, 6166, 6166 },
        { 180, 3000, 360, 4291, 4291 },
        { 240, 3000, 0, 0, 21792 },
        { 240, 3000, 45, 0, 19917 },
        { 240, 3000, 90, 0, 18042 },
        { 240, 3000, 135, 0, 16167 },
        { 240, 3000, 180, 0, 14292 },
        { 240, 3000, 215, 0, 12833 },
        { 240, 3000, 270, 10541, 10541 },
        { 240, 3000, 315, 8666, 8666 },
        { 240, 3000, 360, 6791, 6791 },
        { 270, 3000, 0, 0, 23042 },
        { 270, 3000, 45, 0, 21167 },
        { 270, 3000, 90, 0, 19292 },
        { 270, 3000, 135, 0, 17417 },
        { 270, 3000, 180, 0, 15542 },
        { 270, 3000, 215, 0, 14083 },
        { 270, 3000, 270, 11792, 11792 },
        { 270, 3000, 315, 9916, 9916 },
        { 270, 3000, 360, 8041, 8041 },
        { 360, 3000, 0, 0, 26792 },
        { 360, 3000, 45, 0, 24917 },
        { 360, 3000, 90, 0, 23042 },
        { 360, 3000, 135, 0, 21167 },
        { 360, 3000, 180, 0, 19292 },
        { 360, 3000, 215, 0, 17833 },
        { 360, 3000, 270, 0, 15542 },
        { 360, 3000, 315, 0, 13667 },
        { 360, 3000, 360, 11792, 11792 },
        { 480, 3000, 0, 1791, 1791 },
        { 480, 3000, 45, 0, 29917 },
        { 480, 3000, 90, 0, 28042 },
        { 480, 3000, 135, 0, 26167 },
        { 480, 3000, 180, 0, 24292 },
        { 480, 3000, 215, 0, 22834 },
        { 480, 3000, 270, 0, 20542 },
        { 480, 3000, 315, 0, 18667 },
        { 480, 3000, 360, 0, 16792 },
        { 540, 3000, 0, 4291, 4291 },
        { 540, 3000, 45, 2416, 2416 },
        { 540, 3000, 90, 541, 541 },
        { 540, 3000, 135, 0, 28667 },
        { 540, 3000, 180, 0, 26792 },
        { 540, 3000, 215, 0, 25334 },
        { 540, 3000, 270, 0, 23042 },
        { 540, 3000, 315, 0, 21167 },
        { 540, 3000, 360, 0, 19292 },
        { 600, 3000, 0, 6791, 6791 },
        { 600, 3000, 45, 4916, 4916 },
        { 600, 3000, 90, 3041, 3041 },
        { 600, 3000, 135, 1166, 1166 },
        { 600, 3000, 180, 0, 29292 },
        { 600, 3000, 215, 0, 27834 },
        { 600, 3000, 270, 0, 25542 },
        { 600, 3000, 315, 0, 23667 },
        { 600, 3000, 360, 0, 21792 },
        { 630, 3000, 0, 8041, 8041 },
        { 630, 3000, 45, 6166, 6166 },
        { 630, 3000, 90, 4291, 4291 },
        { 630, 3000, 135, 2416, 2416 },
        { 630, 3000, 180, 541, 541 },
        { 630, 3000, 215, 0, 29084 },
        { 630, 3000, 270, 0, 26792 },
        { 630, 3000, 315, 0, 24917 },
        { 630, 3000, 360, 0, 23042 },
   };

    test_calc_inj_timeout(&test_data[0], &test_data[0]+_countof(test_data));
}

// 
void test_calc_inj_timeout(void)
{
    RUN_TEST(test_calc_inj_timeout_360);
    RUN_TEST(test_calc_inj_timeout_720);
}
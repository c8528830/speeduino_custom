"""
Speeduino: a python script to generate code to print each TS page as ASCII text.

Assumptions:
 1. Each non-table page is declared as a struct named 'configPageN'. E.g. configPage3, configPage13
 2. Each 3D table is declared using the same name as the corresponding table identifier in the INI file.
 
The generated code is not stand alone. It relies on supporting code defined in the Speeduino codebase

Example usage: py ./gen-printpageascii.py > ../speeduino/page_printascii.g.hpp
"""

from TsIniParser import BitVariable, ScalarVariable, Array1dVariable, Page, Variable, TableArray1dVariable, TableArray2dVariable, CurveArray1dVariable

# Code printing

# The C variable/parameter for the print object
OUTPUT_VAR_NAME = 'target'

def generate_printfields(page_num, fields, file):
    """ Print each field in the page """

    def get_fullfieldname(page_num, field):
        return f'configPage{page_num}.{field.CodeName}'

    def gen_scalar(page_num, field):
        return f'\t{OUTPUT_VAR_NAME}.println({get_fullfieldname(page_num, field)});'

    def gen_bit(page_num, field):
        return f'\t{OUTPUT_VAR_NAME}.println({get_fullfieldname(page_num, field)});'

    def gen_array(page_num, field):
        return f'\tprint_array({OUTPUT_VAR_NAME}, {get_fullfieldname(page_num, field)});'
    
    def gen_unknown(page_num, field):
        return f'\t// Unknown field: {field.name}'

    def apply_overrides(fields):
        # Note that set is unordered - we want to preserve order here
        return ((field.CodeOverride if isinstance(field.CodeOverride, Variable) else field) for field in fields)

    def unique_fields(fields):
         return {field.CodeName : field for field in fields}.values()

    print_map = {
        ScalarVariable : gen_scalar,
        BitVariable : gen_bit,
        Array1dVariable: gen_array,
        CurveArray1dVariable: gen_array,
    }       

    fields = apply_overrides(fields)
    fields = unique_fields(fields)
    for generator, field in ((print_map.get(type(field), gen_unknown), field) for field in fields): 
        print(generator(page_num, field), file=file)

def generate_printtables(print_table_vars, file):
    """ Print each table in the page """
    tables = []
    for t in print_table_vars:
        if t.table not in tables:
            tables.append(t.table)    
    for table in tables: 
        print(f'\t{OUTPUT_VAR_NAME}.println(F("\\n{table.title}"));', file=file)
        print(f'\tserial_print_3dtable({OUTPUT_VAR_NAME}, {table.CodeName});', file=file)

def generate_pageprintfunction(function_name, page_node, file):
    print(f'static void {function_name}(Print &{OUTPUT_VAR_NAME}) {{', file=file)
    print(f'\t{OUTPUT_VAR_NAME}.println(F("\\nPg {page_node.page_num} Cfg"));', file=file)

    all_vars = [v for v in page_node.values() if isinstance(v, Variable)]
    print_table_vars = [v for v in all_vars if isinstance(v, TableArray1dVariable) or isinstance(v, TableArray2dVariable)]
    print_fields = [v for v in all_vars if v not in print_table_vars]

    generate_printfields(page_node.page_num, print_fields, file)
    generate_printtables(print_table_vars, file)

    print('}', file=file) 
    print('', file=file)


def generate_printpageascii(parsetree, file):
           
    def get_printpagefunctionname(page_num):
        return f'printPage{page_num}'

    print('/*', file=file)
    print('DO NOT EDIT THIS FILE.', file=file)
    print('', file=file)
    print('It is auto generated and your edits will be overwritten', file=file)
    print('*/', file=file)
    print('', file=file)

    pages = [p for p in parsetree['Constants'].values() if isinstance(p, Page)]
    for page in pages:
        generate_pageprintfunction(get_printpagefunctionname(page.page_num), page, file)

    print(f'void printPageAscii(byte pageNum, Print &{OUTPUT_VAR_NAME}) {{', file=file)
    print('\tswitch(pageNum) {', file=file)
    for page in pages:
        print(f'\t\tcase {page.page_num}:', file=file)
        print(f'\t\t{get_printpagefunctionname(page.page_num)}({OUTPUT_VAR_NAME});', file=file)
        print(f'\t\tbreak;', file=file)
    print('\t}', file=file) 
    print('}', file=file)

if __name__ == "__main__":
    import sys
    from TsIni_Speeduino import load_speeduino_ini
    generate_printpageascii(load_speeduino_ini(), sys.stdout)
